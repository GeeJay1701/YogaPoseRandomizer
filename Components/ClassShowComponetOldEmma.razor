@using Models
@using System.Timers
@using System.IO

@*<h3>ClassShowComponet</h3>
<div class="d-inline-flex">
    <div>Remaining Class Time:</div>
    <div class="ml-auto">@RemainingClassTimeDsp</div>
</div>
<div class="d-inline-flex">
    <div>Remaining Event Time:</div>
    <div class="ml-auto">@RemainingEventTimeDsp</div>
</div>*@

<div class="progress">
    <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" style="width:@TotalPercent%">@Math.Round(TotalPercent)%</div>
</div>
<br />



<ul class="list-group">
    <li class="list-group-item currPose">
        <img  class="center"src="/images/@CurrentEventPicture" width="200" height="200" /><br />
        <span>@CurrentEventName</span>
        <br /><br />
        <div class="badge-pill badge-dark display-4 slidePill d-flex justify-content-center">&nbsp;@RemainingEventTime.ToString("m\\:ss")&nbsp;</div>
        <br />
    </li>
    <li class="list-group-item currPose">Upcoming: @NextEventName</li>
</ul>

<button class="btn btn-primary" @onclick="StartStopTimer">@StartStopButtonTxt</button>
@if (CurrentEventIndex != cEventList.Count)
{
    <button class="btn btn-primary" @onclick="skip">Skip</button>
}
else
{
    <button class="btn btn-primary" disabled>Skip</button>
}

@code {
    [Parameter]
    public YogaClass YogaClass { get; set; }

    [Parameter]
    public String WebRootPath { get; set; }

    TimeSpan RemainingClassTime;
    TimeSpan RemainingEventTime;

    String RemainingClassTimeDsp;
    String RemainingEventTimeDsp;
    String StartStopButtonTxt = "Start";

    String NextEventName;
    String CurrentEventName;
    String CurrentEventPicture;

    double TotalPercent = 0;
    double PrepPercent;
    double PosePercent;
    double ShavaPercent;

    int ChakraCounter = 0;
    int CurrentEventIndex = 0;
    ClassEvent CurrentClassEvent;
    List<ClassEvent> cEventList;

    TimeSpan zeroDuration = TimeSpan.FromSeconds(0.0);
    Timer ClassTimer;

    string[] paths = { @"d:\archives", "2001", "audio", "Bell.wav" };
    string fullPath;
    String wrp;
    System.Media.SoundPlayer player;


    public class ClassEvent
    {
        public String Name { get; set; }
        public String Picture { get; set; }
        public String Type { get; set; }
        public TimeSpan Duration { get; set; }
        public int PoseIndex { get; set; }
    }

    protected override void OnInitialized()
    {
        //Set the total class time.
        RemainingClassTime = new TimeSpan(0, YogaClass.TotalPoseMinutes + YogaClass.ShavasanaDuration, YogaClass.TotalPoseIntervalSeconds);

        // Format the time for mm:ss (use @"mm\:ss" or "mm\\:ss"
        RemainingClassTimeDsp = RemainingClassTime.ToString(@"mm\:ss");

        //Build list of class events
        cEventList = new List<ClassEvent>();

        //Check if there is a Shavasana before class starts
        if (YogaClass.Shavasana == "Before Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Picture = "Shavasana.png";
            poseEvent.Name = "Shavasana";
            poseEvent.Duration = new TimeSpan(0, YogaClass.ShavasanaDuration, 0);
            cEventList.Add(poseEvent);
        }

        //Add Poses to the event list
        for (int i = 0; i < YogaClass.PoseList.Count(); i++)
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "POSE";
            poseEvent.Picture = YogaClass.PoseList[i].Picture;
            poseEvent.Name = YogaClass.PoseList[i].Name;
            poseEvent.Duration = new TimeSpan(0, YogaClass.PoseDuration, 0);
            poseEvent.PoseIndex = i;
            cEventList.Add(poseEvent);
        }

        //Check if there is a Shavasana After class
        if (YogaClass.Shavasana == "After Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Picture = "Shavasana.png";
            poseEvent.Name = "Shavasana";
            poseEvent.Duration = new TimeSpan(0, 0, YogaClass.ShavasanaDuration);
            cEventList.Add(poseEvent);
        }

        //Display the information for the first event.
        CurrentClassEvent = cEventList[CurrentEventIndex];
        RemainingEventTime = CurrentClassEvent.Duration;
        RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");


        //Calculate the percentage of each type of class event
        ClassEvent po = cEventList.Where(x => x.Type == "POSE").First();
        ClassEvent re = cEventList.Where(x => x.Type == "PREP").First();
        ClassEvent sh = cEventList.Where(x => x.Type == "SHAVA").FirstOrDefault();

        if (sh != null)
        {
            ShavaPercent = (sh.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;
        }
        PrepPercent = (re.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;
        PosePercent = (po.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;



        //Begin the Timer
        StartStopTimer();
    }

    public void StartStopTimer()
    {
        //Check is the timer exists or not.
        if (ClassTimer == null)
        {
            // Setup the Timer
            CurrentEventName = CurrentClassEvent.Name;
            CurrentEventPicture = CurrentClassEvent.Picture;
            NextEventName = YogaClass.PoseList[CurrentEventIndex].Name;
            ClassTimer = new Timer(1000);
            ClassTimer.AutoReset = true;
            ClassTimer.Enabled = true;
            ClassTimer.Start();
            ClassTimer.Elapsed += OnTimedEvent;

            //Now the timer is running, change the button text.
            StartStopButtonTxt = "Pause";
        }
        else
        {
            // Timer exists. check if we stop or restart.
            if (ClassTimer.Enabled == true)
            {
                ClassTimer.Stop();
                StartStopButtonTxt = "Resume";
            }
            else
            {
                ClassTimer.Start();
                StartStopButtonTxt = "Pause";
            }
        }
    }
    public void skip()
    {
        ClassTimer.Stop();
        CurrentEventIndex++;
        if (CurrentClassEvent.Type == "SHAVA")
        {
            TotalPercent += ShavaPercent;
        }
        else if (CurrentClassEvent.Type == "POSE")
        {
            TotalPercent += PosePercent;
        }
        else if (CurrentClassEvent.Type == "PREP")
        {
            TotalPercent += PrepPercent;
        }
        if (CurrentEventIndex != cEventList.Count)
        {
            CurrentClassEvent = cEventList[CurrentEventIndex];
            CurrentEventName = CurrentClassEvent.Name;
            CurrentEventPicture = CurrentClassEvent.Picture;

            if (CurrentEventIndex == cEventList.Count - 1)
            {
                NextEventName = "Finish";
            }
            else
            {
                if(CurrentClassEvent.Type == "POSE")
                    NextEventName = cEventList[CurrentEventIndex+2].Name;
            }

            RemainingClassTime = RemainingClassTime.Subtract(RemainingEventTime);
            RemainingClassTimeDsp = RemainingClassTime.ToString(@"mm\:ss");
            RemainingEventTime = CurrentClassEvent.Duration;
            RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");

            fullPath = Path.Combine(paths);
            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
            player = new System.Media.SoundPlayer(wrp);
            player.Play();
            ClassTimer.Start();
        }
        else
        {

            CurrentEventPicture = "done.png";
            CurrentEventName = "Done";
            NextEventName = "";

            RemainingClassTime = RemainingClassTime.Subtract(RemainingEventTime);
            RemainingClassTimeDsp = RemainingClassTime.ToString(@"mm\:ss");
            RemainingEventTime = zeroDuration;
            RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");
            fullPath = Path.Combine(paths);
            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
            player = new System.Media.SoundPlayer(wrp);
            player.Play();
            ClassTimer.Stop();
            ClassTimer.Dispose();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });

        }
    }

    public void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        RemainingClassTime = RemainingClassTime.Subtract(TimeSpan.FromSeconds(1));
        RemainingClassTimeDsp = RemainingClassTime.ToString(@"mm\:ss");
        RemainingEventTime = RemainingEventTime.Subtract(TimeSpan.FromSeconds(1));
        RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");

        //Check is Class has ended.
        if (RemainingClassTime > zeroDuration)
        {   //Class is still in active


            //Check if the event is still active
            if (RemainingEventTime > zeroDuration)
            {//Yup this acitve

            }
            else
            {
                CurrentEventIndex += 1;
                RemainingEventTime = cEventList[CurrentEventIndex].Duration;
                RemainingEventTime = RemainingEventTime.Subtract(TimeSpan.FromSeconds(1));
                RemainingEventTimeDsp = RemainingEventTime.ToString(@"mm\:ss");

                if (CurrentClassEvent.Type == "SHAVA")
                {
                    TotalPercent += ShavaPercent;
                }
                else if (CurrentClassEvent.Type == "POSE")
                {
                    TotalPercent += PosePercent;
                }
                else if (CurrentClassEvent.Type == "PREP")
                {
                    TotalPercent += PrepPercent;
                }

                if (CurrentEventIndex != cEventList.Count - 1)
                {
                    CurrentClassEvent = cEventList[CurrentEventIndex];
                    CurrentEventName = CurrentClassEvent.Name;
                    CurrentEventPicture = CurrentClassEvent.Picture;
                    if (CurrentEventIndex == cEventList.Count - 2)
                    {
                        NextEventName = "Finish";
                    }
                    else
                    {
                        if(CurrentClassEvent.Type == "POSE")
                            NextEventName = cEventList[CurrentEventIndex+2].Name;
                    }
                    if(CurrentClassEvent.Type == "POSE")
                        NextEventName = cEventList[CurrentEventIndex+2].Name;
                    RemainingEventTime = CurrentClassEvent.Duration;

                }
                else
                {

                    CurrentEventPicture = "done.png";
                    CurrentEventName = "Done";
                    NextEventName = "";
                    ClassTimer.Stop();
                    ClassTimer.Dispose();

                }

                fullPath = Path.Combine(paths);
                wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
                player = new System.Media.SoundPlayer(wrp);
                player.Play();
            }

            //Because changes are happening within a timer event we need to let the
            //system know that the state of certain elements have changed.
            InvokeAsync(StateHasChanged);
        }
        else
        {   //Class has end.  Clean up the timer
            ClassTimer.Stop();
            ClassTimer.Dispose();
        }

    }

}
