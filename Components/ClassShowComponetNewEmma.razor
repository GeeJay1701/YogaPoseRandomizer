@using Models
@using System.Timers
@using System.IO


<div class="row d-flex justify-content-center">
    <div class="d-flex flex-column">
        <div class="my-3 align-self-center">Current: @CurrentEventName</div>
        <img src="/images/@CurrentEventPicture" width="200" height="200" />
        <h1 class="display-4 align-self-center mt-3">
            <span class="badge badge-pill badge-dark">@RemainingEventTime.ToString("m\\:ss")</span>
        </h1>
    </div>
</div>

<div class="progress my-3">
    <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" style="width:@TotalPercent%">@Math.Round(TotalPercent)%</div>
</div>

<div class="row d-flex justify-content-center">
    Upcoming: @NextEventName
</div>

<div class="row justify-content-end m-3">
    <button class="btn btn-primary" @onclick="StartStopTimer">@StartStopButtonTxt</button>
    @if (CurrentEventIndex != cEventList.Count)
    {
        <button class="btn btn-primary mx-3" @onclick="skip">Skip</button>
    }
    else
    {
        <button class="btn btn-primary mx-3" disabled>Skip</button>
    }
</div>


@code {
    [Parameter]
    public YogaClass YogaClass { get; set; }

    [Parameter]
    public String WebRootPath { get; set; }

    TimeSpan RemainingClassTime;
    TimeSpan RemainingEventTime;

    //String RemainingClassTimeDsp;
    //String RemainingEventTimeDsp;
    String StartStopButtonTxt = "Start";

    String NextEventName;
    String CurrentEventName;
    String CurrentEventPicture;

    double TotalPercent = 0;
    double PrepPercent;
    double PosePercent;
    double ShavaPercent;

    int ChakraCounter = 0;
    int CurrentEventIndex = 0;
    ClassEvent CurrentClassEvent;
    List<ClassEvent> cEventList;

    TimeSpan zeroDuration = TimeSpan.FromSeconds(0.0);
    Timer ClassTimer;

    String wrp;
    System.Media.SoundPlayer player;


    public class ClassEvent
    {
        public String Name { get; set; }
        public String Picture { get; set; }
        public String Type { get; set; }
        public TimeSpan Duration { get; set; }
        public int PoseIndex { get; set; }
    }

    protected override void OnInitialized()
    {
        //Set the total class time.
        RemainingClassTime = new TimeSpan(0, YogaClass.TotalPoseMinutes + YogaClass.ShavasanaDuration, YogaClass.TotalPoseIntervalSeconds);

        //Build list of class events
        cEventList = new List<ClassEvent>();

        //Check if there is a Shavasana before class starts
        if (YogaClass.Shavasana == "Before Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Picture = "Shavasana.png";
            poseEvent.Name = "Shavasana";
            poseEvent.Duration = new TimeSpan(0, YogaClass.ShavasanaDuration, 0);
            cEventList.Add(poseEvent);
        }

        //Add Poses to the event list
        for (int i = 0; i < YogaClass.PoseList.Count(); i++)
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "POSE";
            poseEvent.Picture = YogaClass.PoseList[i].Picture;
            poseEvent.Name = YogaClass.PoseList[i].Name;
            poseEvent.Duration = new TimeSpan(0, YogaClass.PoseDuration, 0);
            poseEvent.PoseIndex = i;
            cEventList.Add(poseEvent);
        }

        //Check if there is a Shavasana After class
        if (YogaClass.Shavasana == "After Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Picture = "Shavasana.png";
            poseEvent.Name = "Shavasana";
            poseEvent.Duration = new TimeSpan(0, 0, YogaClass.ShavasanaDuration);
            cEventList.Add(poseEvent);
        }

        //Display the information for the first event.
        CurrentClassEvent = cEventList[CurrentEventIndex];
        RemainingEventTime = CurrentClassEvent.Duration;

        //Calculate the percentage of each type of class event
        ClassEvent po = cEventList.Where(x => x.Type == "POSE").First();
        ClassEvent re = cEventList.Where(x => x.Type == "PREP").First();
        ClassEvent sh = cEventList.Where(x => x.Type == "SHAVA").FirstOrDefault();

        if (sh != null)
        {
            ShavaPercent = (sh.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;
        }
        PrepPercent = (re.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;
        PosePercent = (po.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;



        //Begin the Timer
        Timer();
    }

    bool Paused = false;


    TimeSpan TimeLeft = new TimeSpan(0, 0, 15);
    async Task Timer()
    {
        while (RemainingClassTime > new TimeSpan() && !Paused)
        {
            await Task.Delay(1000);
            RemainingClassTime = RemainingClassTime.Subtract(new TimeSpan(0, 0, 1));
            RemainingEventTime = RemainingEventTime.Subtract(new TimeSpan(0, 0, 1));

            if (RemainingEventTime > zeroDuration)
            {

            }
            else
            {

                CurrentEventIndex += 1;
                if (CurrentClassEvent.Type == "SHAVA")
                {
                    TotalPercent += ShavaPercent;
                }
                else if (CurrentClassEvent.Type == "POSE")
                {
                    TotalPercent += PosePercent;
                }
                else if (CurrentClassEvent.Type == "PREP")
                {
                    TotalPercent += PrepPercent;
                }

                if (CurrentEventIndex != cEventList.Count - 1)
                {
                    CurrentClassEvent = cEventList[CurrentEventIndex];
                    CurrentEventName = CurrentClassEvent.Name;
                    CurrentEventPicture = CurrentClassEvent.Picture;
                    if (CurrentEventIndex == cEventList.Count - 2)
                    {
                        NextEventName = "Finish";
                    }
                    else
                    {
                        if (CurrentClassEvent.Type == "POSE")
                            NextEventName = cEventList[CurrentEventIndex + 2].Name;
                    }
                    if (CurrentClassEvent.Type == "POSE")
                        NextEventName = cEventList[CurrentEventIndex + 2].Name;
                    RemainingEventTime = CurrentClassEvent.Duration;

                }
                else
                {

                    CurrentEventPicture = "done.png";
                    CurrentEventName = "Done";
                    NextEventName = "";

                }

                wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
                player = new System.Media.SoundPlayer(wrp);
                player.Play();

            }

            StateHasChanged();
        }

    }


    public void StartStopTimer()
    {
        if(Paused)
        {
            Paused = false;
            StartStopButtonTxt = "Pause";
        }
        else
        {
            Paused = true;
            StartStopButtonTxt = "Resume";
        }
    }

    //    //Check is the timer exists or not.
    //    if (ClassTimer == null)
    //    {
    //        // Setup the Timer
    //        CurrentEventName = CurrentClassEvent.Name;
    //        CurrentEventPicture = CurrentClassEvent.Picture;
    //        NextEventName = YogaClass.PoseList[CurrentEventIndex].Name;
    //        ClassTimer = new Timer(1000);
    //        ClassTimer.AutoReset = true;
    //        ClassTimer.Enabled = true;
    //        ClassTimer.Start();
    //        ClassTimer.Elapsed += OnTimedEvent;

    //        //Now the timer is running, change the button text.
    //        StartStopButtonTxt = "Pause";
    //    }
    //    else
    //    {
    //        // Timer exists. check if we stop or restart.
    //        if (ClassTimer.Enabled == true)
    //        {
    //            ClassTimer.Stop();
    //            StartStopButtonTxt = "Resume";
    //        }
    //        else
    //        {
    //            ClassTimer.Start();
    //            StartStopButtonTxt = "Pause";
    //        }
    //    }
    //}

    public void skip()
    {
        ClassTimer.Stop();
        CurrentEventIndex++;
        if (CurrentClassEvent.Type == "SHAVA")
        {
            TotalPercent += ShavaPercent;
        }
        else if (CurrentClassEvent.Type == "POSE")
        {
            TotalPercent += PosePercent;
        }
        else if (CurrentClassEvent.Type == "PREP")
        {
            TotalPercent += PrepPercent;
        }
        if (CurrentEventIndex != cEventList.Count)
        {
            CurrentClassEvent = cEventList[CurrentEventIndex];
            CurrentEventName = CurrentClassEvent.Name;
            CurrentEventPicture = CurrentClassEvent.Picture;

            if (CurrentEventIndex == cEventList.Count - 1)
            {
                NextEventName = "Finish";
            }
            else
            {
                if (CurrentClassEvent.Type == "POSE")
                    NextEventName = cEventList[CurrentEventIndex + 2].Name;
            }

            RemainingClassTime = RemainingClassTime.Subtract(RemainingEventTime);
            RemainingEventTime = CurrentClassEvent.Duration;

            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
            player = new System.Media.SoundPlayer(wrp);
            player.Play();
            ClassTimer.Start();
        }
        else
        {

            CurrentEventPicture = "done.png";
            CurrentEventName = "Done";
            NextEventName = "";

            RemainingClassTime = RemainingClassTime.Subtract(RemainingEventTime);
            RemainingEventTime = zeroDuration;

            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
            player = new System.Media.SoundPlayer(wrp);
            player.Play();

            StateHasChanged();

        }
    }

    //public void OnTimedEvent(Object source, ElapsedEventArgs e)
    //{
    //    RemainingClassTime = RemainingClassTime.Subtract(TimeSpan.FromSeconds(1));
    //    RemainingEventTime = RemainingEventTime.Subtract(TimeSpan.FromSeconds(1));

    //    //Check is Class has ended.
    //    if (RemainingClassTime > zeroDuration)
    //    {   //Class is still in active


    //        //Check if the event is still active
    //        if (RemainingEventTime > zeroDuration)
    //        {//Yup this acitve

    //        }
    //        else
    //        {
    //            CurrentEventIndex += 1;
    //            RemainingEventTime = cEventList[CurrentEventIndex].Duration;
    //            RemainingEventTime = RemainingEventTime.Subtract(TimeSpan.FromSeconds(1));

    //            if (CurrentClassEvent.Type == "SHAVA")
    //            {
    //                TotalPercent += ShavaPercent;
    //            }
    //            else if (CurrentClassEvent.Type == "POSE")
    //            {
    //                TotalPercent += PosePercent;
    //            }
    //            else if (CurrentClassEvent.Type == "PREP")
    //            {
    //                TotalPercent += PrepPercent;
    //            }

    //            if (CurrentEventIndex != cEventList.Count - 1)
    //            {
    //                CurrentClassEvent = cEventList[CurrentEventIndex];
    //                CurrentEventName = CurrentClassEvent.Name;
    //                CurrentEventPicture = CurrentClassEvent.Picture;
    //                if (CurrentEventIndex == cEventList.Count - 2)
    //                {
    //                    NextEventName = "Finish";
    //                }
    //                else
    //                {
    //                    if (CurrentClassEvent.Type == "POSE")
    //                        NextEventName = cEventList[CurrentEventIndex + 2].Name;
    //                }
    //                if (CurrentClassEvent.Type == "POSE")
    //                    NextEventName = cEventList[CurrentEventIndex + 2].Name;
    //                RemainingEventTime = CurrentClassEvent.Duration;

    //            }
    //            else
    //            {

    //                CurrentEventPicture = "done.png";
    //                CurrentEventName = "Done";
    //                NextEventName = "";
    //                ClassTimer.Stop();
    //                ClassTimer.Dispose();

    //            }

    //            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
    //            player = new System.Media.SoundPlayer(wrp);
    //            player.Play();
    //        }

    //        //Because changes are happening within a timer event we need to let the
    //        //system know that the state of certain elements have changed.
    //        InvokeAsync(StateHasChanged);
    //    }
    //    else
    //    {   //Class has end.  Clean up the timer
    //        ClassTimer.Stop();
    //        ClassTimer.Dispose();
    //    }

    //}

}
