@using Models
@using System.Timers
@using System.IO


<div class="row d-flex justify-content-center">
    <div class="d-flex flex-column">
        <div class="my-3 align-self-center">Current: @CurrentEventName</div>
        <img src="/images/@CurrentEventPicture" width="200" height="200" />
        <h1 class="display-4 align-self-center mt-3">
            <span class="badge badge-pill badge-dark">@RemainingEventTime.ToString("m\\:ss")</span>
        </h1>
    </div>
</div>

<div class="progress my-3">
    <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" style="width:@TotalPercent%">@Math.Round(TotalPercent)%</div>
</div>

<div class="row d-flex justify-content-center">
    Upcoming: @NextEventName
</div>

<div class="row justify-content-end m-3">
    <button class="btn btn-primary" @onclick="StartStopTimer">@StartStopButtonTxt</button>
    @if (CurrentEventIndex != cEventList.Count)
    {
        <button class="btn btn-primary mx-3" @onclick="skip">Skip</button>
    }
    else
    {
        <button class="btn btn-primary mx-3" disabled>Skip</button>
    }
</div>


@code {
    [Parameter]
    public YogaClass YogaClass { get; set; }

    [Parameter]
    public String WebRootPath { get; set; }

    TimeSpan RemainingClassTime;
    TimeSpan RemainingEventTime;

    //String RemainingClassTimeDsp;
    //String RemainingEventTimeDsp;
    String StartStopButtonTxt = "Pause";

    String NextEventName;
    String CurrentEventName;
    String CurrentEventPicture;

    double TotalPercent = 0;
    double PrepPercent;
    double PosePercent;
    double ShavaPercent;

    bool TimerIsRunning;

    int ChakraCounter = 0;
    int CurrentEventIndex = 0;
    ClassEvent CurrentClassEvent;
    List<ClassEvent> cEventList;

    TimeSpan zeroDuration = TimeSpan.FromSeconds(0.0);
    Timer ClassTimer;

    String wrp;
    System.Media.SoundPlayer player;


    public class ClassEvent
    {
        public String Name { get; set; }
        public String Picture { get; set; }
        public String Type { get; set; }
        public TimeSpan Duration { get; set; }
        public int PoseIndex { get; set; }
    }

    protected override Task OnInitializedAsync()
    {
        TimerIsRunning = true;
        //Set the total class time.
        RemainingClassTime = new TimeSpan(0, YogaClass.TotalPoseMinutes + YogaClass.ShavasanaDuration, YogaClass.TotalPoseIntervalSeconds);

        //Build list of class events
        cEventList = new List<ClassEvent>();

        //Check if there is a Shavasana before class starts
        if (YogaClass.Shavasana == "Before Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Picture = "Shavasana.png";
            poseEvent.Name = "Shavasana";
            poseEvent.Duration = new TimeSpan(0, YogaClass.ShavasanaDuration, 0);
            cEventList.Add(poseEvent);
        }

        //Add Poses to the event list
        for (int i = 0; i < YogaClass.PoseList.Count(); i++)
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "POSE";
            poseEvent.Picture = YogaClass.PoseList[i].Picture;
            poseEvent.Name = YogaClass.PoseList[i].Name;
            poseEvent.Duration = new TimeSpan(0, YogaClass.PoseDuration, 0);
            poseEvent.PoseIndex = i;
            cEventList.Add(poseEvent);

            if(YogaClass.PoseList[i].Type == "Double")
            {
                ClassEvent prepEventDouble = new ClassEvent();
                prepEventDouble.Type = "PREP";
                prepEventDouble.Picture = "Prep.png";
                prepEventDouble.Name = "Prep";
                prepEventDouble.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
                cEventList.Add(prepEvent);

                ClassEvent poseEventDouble = new ClassEvent();
                poseEventDouble.Type = "POSE";
                poseEventDouble.Picture = "Double"+YogaClass.PoseList[i].Picture;
                poseEventDouble.Name = YogaClass.PoseList[i].Name;
                poseEventDouble.Duration = new TimeSpan(0, YogaClass.PoseDuration, 0);
                poseEventDouble.PoseIndex = i;
               cEventList.Add(poseEventDouble);
            }
        }

        //Check if there is a Shavasana After class
        if (YogaClass.Shavasana == "After Class")
        {
            ClassEvent prepEvent = new ClassEvent();
            prepEvent.Type = "PREP";
            prepEvent.Picture = "Prep.png";
            prepEvent.Name = "Prep";
            prepEvent.Duration = new TimeSpan(0, 0, YogaClass.PrepDuration);
            cEventList.Add(prepEvent);

            ClassEvent poseEvent = new ClassEvent();
            poseEvent.Type = "SHAVA";
            poseEvent.Picture = "Shavasana.png";
            poseEvent.Name = "Shavasana";
            poseEvent.Duration = new TimeSpan(0, YogaClass.ShavasanaDuration, 0);
            cEventList.Add(poseEvent);
        }

        //Display the information for the first event.
        CurrentClassEvent = cEventList[CurrentEventIndex];
        CurrentEventName = CurrentClassEvent.Name;
        NextEventName = cEventList[CurrentEventIndex + 1].Name;
        RemainingEventTime = CurrentClassEvent.Duration;

        //Calculate the percentage of each type of class event
        ClassEvent po = cEventList.Where(x => x.Type == "POSE").First();
        ClassEvent re = cEventList.Where(x => x.Type == "PREP").First();
        ClassEvent sh = cEventList.Where(x => x.Type == "SHAVA").FirstOrDefault();

        if (sh != null)
        {
            ShavaPercent = (sh.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;
        }


        PrepPercent = (re.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;
        PosePercent = (po.Duration.TotalSeconds / RemainingClassTime.TotalSeconds) * 100;


        //Begin the Timer
        Timer();

        return base.OnInitializedAsync();
    }


    async Task Timer()
    {

        while (RemainingClassTime > new TimeSpan() && TimerIsRunning)
        {
            await Task.Delay(1000);

            if (TimerIsRunning)
            {
                RemainingClassTime = RemainingClassTime.Subtract(new TimeSpan(0, 0, 1));
                RemainingEventTime = RemainingEventTime.Subtract(new TimeSpan(0, 0, 1));

                if (RemainingEventTime > zeroDuration)
                {

                }
                else
                {

                    CurrentEventIndex += 1;
                    if (CurrentClassEvent.Type == "SHAVA")
                    {
                        TotalPercent += ShavaPercent;
                    }
                    else if (CurrentClassEvent.Type == "POSE")
                    {
                        TotalPercent += PosePercent;
                    }
                    else if (CurrentClassEvent.Type == "PREP")
                    {
                        TotalPercent += PrepPercent;
                    }

                    if (CurrentEventIndex != cEventList.Count - 1)
                    {
                        CurrentClassEvent = cEventList[CurrentEventIndex];
                        CurrentEventName = CurrentClassEvent.Name;
                        CurrentEventPicture = CurrentClassEvent.Picture;
                        if (CurrentEventIndex == cEventList.Count - 2)
                        {
                            NextEventName = "Finish";
                        }
                        else
                        {
                            if (CurrentClassEvent.Type == "POSE" || CurrentClassEvent.Type == "SHAVA")
                                NextEventName = cEventList[CurrentEventIndex + 2].Name;
                        }
                        if (CurrentClassEvent.Type == "POSE" || CurrentClassEvent.Type == "SHAVA")
                            NextEventName = cEventList[CurrentEventIndex + 2].Name;
                        RemainingEventTime = CurrentClassEvent.Duration;

                    }
                    else
                    {

                        CurrentEventPicture = "done.png";
                        CurrentEventName = "Done";
                        NextEventName = "";

                    }

                    wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
                    player = new System.Media.SoundPlayer(wrp);
                    player.Play();

                }
                StateHasChanged();
            }
        }

        await TimerDone();
        StateHasChanged();


    }

    Task TimerDone()
    {
        return Task.CompletedTask;
    }

    public void StartStopTimer()
    {
        if (TimerIsRunning)
        {
            TimerIsRunning = false;
            StartStopButtonTxt = "Resume";

        }
        else
        {
            TimerIsRunning = true;
            StartStopButtonTxt = "Pause";
            Timer();

        }

    }

    public void skip()
    {
        CurrentEventIndex++;
        if (CurrentClassEvent.Type == "SHAVA")
        {
            TotalPercent += ShavaPercent;
        }
        else if (CurrentClassEvent.Type == "POSE")
        {
            TotalPercent += PosePercent;
        }
        else if (CurrentClassEvent.Type == "PREP")
        {
            TotalPercent += PrepPercent;
        }
        if (CurrentEventIndex != cEventList.Count)
        {
            CurrentClassEvent = cEventList[CurrentEventIndex];
            CurrentEventName = CurrentClassEvent.Name;
            CurrentEventPicture = CurrentClassEvent.Picture;

            if (CurrentEventIndex == cEventList.Count - 1)
            {
                NextEventName = "Finish";
            }
            else
            {
                if (CurrentClassEvent.Type == "POSE" || CurrentClassEvent.Type == "SHAVA")
                    NextEventName = cEventList[CurrentEventIndex + 2].Name;
            }

            RemainingClassTime = RemainingClassTime.Subtract(RemainingEventTime);
            RemainingEventTime = CurrentClassEvent.Duration;

            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
            player = new System.Media.SoundPlayer(wrp);
            player.Play();
            StateHasChanged();
        }
        else
        {

            CurrentEventPicture = "done.png";
            CurrentEventName = "Done";
            NextEventName = "";

            RemainingClassTime = RemainingClassTime.Subtract(RemainingEventTime);
            RemainingEventTime = zeroDuration;

            wrp = Path.Combine(WebRootPath, "audio", "Bell.wav");
            player = new System.Media.SoundPlayer(wrp);
            player.Play();

            StateHasChanged();

        }
    }


}
